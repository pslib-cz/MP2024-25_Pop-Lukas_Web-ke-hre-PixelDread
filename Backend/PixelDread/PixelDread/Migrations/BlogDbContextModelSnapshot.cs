// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PixelDread.Data;

#nullable disable

namespace PixelDread.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("PixelDread.Models.ArticlePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.ToTable("ArticlePart");

                    b.HasDiscriminator<string>("ArticleType").HasValue("ArticlePart");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PixelDread.Models.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("AuthorId1")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OGDataId")
                        .HasColumnType("integer");

                    b.Property<bool>("Visibility")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId1");

                    b.HasIndex("OGDataId")
                        .IsUnique();

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("PixelDread.Models.BlogArticle", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("integer");

                    b.Property<int>("ArticlePartId")
                        .HasColumnType("integer");

                    b.Property<int>("ArticleType")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("BlogId", "ArticlePartId");

                    b.HasIndex("ArticlePartId");

                    b.ToTable("BlogArticles");
                });

            modelBuilder.Entity("PixelDread.Models.BlogCategory", b =>
                {
                    b.Property<int>("BlogId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("BlogId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("PixelDread.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PixelDread.Models.OGData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BlogId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<byte[]>("Media")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OGData");
                });

            modelBuilder.Entity("PixelDread.Models.FAQArticlePart", b =>
                {
                    b.HasBaseType("PixelDread.Models.ArticlePart");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("FAQ");
                });

            modelBuilder.Entity("PixelDread.Models.ImageArticlePart", b =>
                {
                    b.HasBaseType("PixelDread.Models.ArticlePart");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Media")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasDiscriminator().HasValue("Image");
                });

            modelBuilder.Entity("PixelDread.Models.LinkArticlePart", b =>
                {
                    b.HasBaseType("PixelDread.Models.ArticlePart");

                    b.Property<string>("placeholder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Link");
                });

            modelBuilder.Entity("PixelDread.Models.TextArticlePart", b =>
                {
                    b.HasBaseType("PixelDread.Models.ArticlePart");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("PixelDread.Models.Blog", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId1");

                    b.HasOne("PixelDread.Models.OGData", "OGData")
                        .WithOne("Blog")
                        .HasForeignKey("PixelDread.Models.Blog", "OGDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("OGData");
                });

            modelBuilder.Entity("PixelDread.Models.BlogArticle", b =>
                {
                    b.HasOne("PixelDread.Models.ArticlePart", "ArticlePart")
                        .WithMany()
                        .HasForeignKey("ArticlePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PixelDread.Models.Blog", "Blog")
                        .WithMany("BlogArticles")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArticlePart");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("PixelDread.Models.BlogCategory", b =>
                {
                    b.HasOne("PixelDread.Models.Blog", "Blog")
                        .WithMany("BlogCategories")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PixelDread.Models.Category", "Category")
                        .WithMany("BlogCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PixelDread.Models.Blog", b =>
                {
                    b.Navigation("BlogArticles");

                    b.Navigation("BlogCategories");
                });

            modelBuilder.Entity("PixelDread.Models.Category", b =>
                {
                    b.Navigation("BlogCategories");
                });

            modelBuilder.Entity("PixelDread.Models.OGData", b =>
                {
                    b.Navigation("Blog")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
